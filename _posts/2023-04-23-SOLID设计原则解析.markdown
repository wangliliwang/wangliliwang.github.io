---
layout: post
title:  "SOLID设计原则解析"
date:   2023-04-23 17:43:49 +0800
categories: Software-Architecture
toc: true
---

<h2> SOLID设计原则 </h2>

本文介绍SOLID 5大设计原则，以及与设计模式的关系。

设计原则是进行软件系统设计、开发的原则，应用于两个层面：
1. 组件层面：指导如何将代码组织成类、组件
2. 架构层面：指导如何将组件组织为软件系统

本文只涉及“组件层面”。

使用设计原则的目的：提高代码复用性、可读性、可维护性。

### Single Responsibility Principle 单一职责原则

#### 例子

##### <b>问题描述</b>

![](/assets/image/20230423-solid/srp-1.png)

某一个工资管理程序中有1个类Employee，包含了2个函数，对应的是2个不同的行为者：
1. GetSalaryReport（获取薪资报表）由财务部门确定规则，负责向CFO汇报
2. GetWorkReport（获取假勤报表）由人力资源部门确定规则，负责向COO汇报

GetSalaryReport和GetWorkReport都需要计算工作时长，程序员为了复用代码，会用同一个函数getRegularHours实现。

某一天，CFO团队需要修改工作时长计算方法，程序员修改时，没有注意到此函数被GetWorkReport使用，修改后经CFO团队测试后直接上线。之后COO团队仍在使用GetWorkReport函数，生成错误报表，最终会造成大量损失。

##### <b>问题分析</b>

问题的根源是将不同行为者依赖的代码强行拼凑在了一起。

##### <b>解决方案</b>

1. 对于CFO、COO团队，对应使用2个类实现各自的业务功能，各自计算工作时长
2. 方案缺点：使用方需要处理2个类，而不是之前的一个，增加了使用成本

![](/assets/image/20230423-solid/srp-2.png)

#### <b>原则阐述</b>

阐述：每个类/组件只承担一个职责，只有一个被变更的原因，这个变更原因是由它负责的职责确定的。同时，此类/组件需要提供该职责的完整功能。

假设一个类负责多个职责，当有需求修改这个类时，有可能导致另一个类的功能发生故障。

目的：
1. 实现高内聚、低耦合
2. 提高代码复用性、可读性、可维护性

### Open Closed Principle 开闭原则

#### 例子

目标：设计一个财务报表系统，可以根据原始数据计算报表数据，并在Web上展示财务报表。
1. [一期需求]Web上展示的数据，滚动展示，且负值显示为红色
2. [二期需求]打印数据时，使用黑白打印机打印，需要做分页逻辑，且每页上都有表头，需要展示页码，负值以括号展示

分析：

良好的设计，代码复用性强；在新增功能时，只需要修改少量甚至不修改已有代码。

最终方案：
1. 实现新功能，只需要增加PrintPresenter, PDFView类，不需要修改旧代码。
2. 依赖是单向的，且最终指向Interactor。也意味着Interactor是系统中最抽象的类，其他类的修改，都不会影响到它。

![](/assets/image/20230423-solid/ocp-1.png)

#### 原则阐述

阐述：一个设计良好的类/组件应该在不需要修改现有代码的前提下就可以轻易被扩展。也就是对扩展Open，对修改Close。

对修改Close，意味着尽可能降低需求变化时对现有代码的修改量，甚至降低为0；这个目标是我们学习设计原则的根本目的。如果对原始需求的小小变动就需要对原有的软件系统进行大幅修改，这个设计一定是失败的。

目的：
1. 让系统容易扩展，同时限制每次修改的影响范围。
2. 提高代码复用性、可读性、可维护性

### Liskov Substitution Principle 里氏替换原则

#### 例子

说明：
1. List定义了一组方法
2. 有两个好的实现的例子：LinkedList, ArrayList，他们完全按照接口定义的行为实现细节
3. 有两个不好的实现的例子CustomList

List接口：
```go
var OutOfBoundError = errors.New("index out of bound")

type List[T any] interface {
    // 如果index越界，返回OutOfBoundError.
    GetByIndex(index int) (T, error)
    Length() int
}
```

坏例子1：改变了接口定义的行为

```go
func (c *CustomList[T]) GetByIndex(index int) (T, error) {
    var zeroT T
    if index < 0 || index >= len(c.data) {
        return zeroT, errors.New("err occurred")
    }
    return c.data[index], nil
}
```

坏例子2：改变了接口的语义

下述实现返回倒序的顺序。
```go
func (c *CustomList[T]) GetByIndex(index int) (T, error) {
    var zeroT T
    if index < 0 || index >= len(c.data) {
        return zeroT, OutOfBoundError
    }
    return c.data[len(c.data)-1-index], nil
}
```

#### 原则阐述

阐述：如果想用可替换的组件（子类、HTTP接口等）来构建软件系统，那么这些组件就必须遵循同一个约定，以便他们可以相互替换。

目的： 降低系统复杂性。

违反此原则的危害：
1. 反直觉：使用方期望所有的子类行为是一致的。
2. 增加代码复杂度：如果子类行为不一致，可能需要不同的逻辑分支适配不同的行为，增加代码复杂度。

### Interface Segregation Principle 接口隔离原则

#### 例子

说明：
1. golang的标准库的interface都设计得很小
2. 以io接口为例，net.Conn实现了Reader/Writer/Closer, os.File实现了Reader/Writer/Closer/Seeker
3. 如果io只定义了包括Read/Write/Close/Seek四个方法的接口，那么net.Conn如果想使用这些接口，就需要实现自己不需要关心的方法。

io相关接口：
```go
// 读取最多len(p)个byte到p中；返回实际读取的byte数量，及error。
type Reader interface {
    Read(p []byte) (n int, err error)
}

// 写入p中的数据到io具体实现中中
type Writer interface {
    Write(p []byte) (n int, err error)
}

type Closer interface {
    Close() error
}

// 设置Read读取offset, 或Write函数写入offset
type Seeker interface {
    Seek(offset int64, whence int) (int64, error)
}
```

net包中的Conn是面向stream的网络连接接口。实现了Reader/Writer/Closer，未实现Seeker.

TCPConn和UDPConn均实现了Conn.
```go
type Conn interface {
    // Read reads data from the connection.
    Read(b []byte) (n int, err error)
    // Write writes data to the connection.
    Write(b []byte) (n int, err error)
    // Close closes the connection.
    Close() error

    // ...
}
```

os包的File表示一个文件描述符，实现了Reader/Writer/Closer/Seeker 4个接口。
```go
// File represents an open file descriptor.
type File struct {
    *file
}
```

#### 原则阐述

阐述：尽量将臃肿庞大的接口拆分成较小的接口，让接口只包含使用方感兴趣的方法。从而使用方可以避免引入不需要的依赖。

### Dependency Inversion Principle 依赖反转原则

#### 例子

设计一个登陆服务（DeviceService）：
1. DeviceService对外提供Login功能，封装了不同的登陆设备
2. 目前的设备包括DevicePhone, DeviceTL5两种，后续会新增更多类型

初始实现，未使用interface：
1. DeviceService依赖DevicePhone, DeviceTL5两个具体实现
2. 使用Device的时候，根据私有变量deviceType判断使用哪个device实例
3. 增加设备时：需要修改DeviceService，增加一个DeviceXXX类

![](/assets/image/20230423-solid/dip-1.png)

```go
type DevicePhone struct {

}

func (d *DevicePhone) Login() error {
    logger.Println("DevicePhone login")
    return nil
}

type DeviceTL5 struct {

}

func (d *DeviceTL5) Login() error {
    logger.Println("DeviceTL5 login")
    return nil
}

type DeviceService struct {
    deviceType string
    devicePhone *DevicePhone
    deviceTL5 *DeviceTL5
}

func (d *DeviceService) Login() error {
    switch d.deviceType {
    case "device_phone":
        return d.devicePhone.Login()
    case "device_tl5":
        return d.deviceTL5.Login()
    default:
        panic("invalid device_type")
    }
}
```

改进实现，使用interface：
1. DeviceService只依赖Device这个interface，不关心具体实现是哪个
2. DevicePhone/DeviceTL5时Device的两个实现
3. 增加设备时，只需要增加DeviceXXX类（实现Device）

![](/assets/image/20230423-solid/dip-2.png)

```go
type Device interface {
    Login() error
}

type DeviceService struct {
    device Device
}

func (d *DeviceService) Login() error {
    return d.device.Login()
}
```

#### 原则阐述

阐述：
要面向接口编程，而不是面向实现编程。高层模块不应该依赖低层模块，两者都应该依赖其抽象；抽象不应该依赖细节，细节应该依赖抽象。

依赖倒置原则是实现开闭原则的重要途径之一，它降低了使用方与实现模块之间的耦合。由于在软件设计中，细节具有多变性，而抽象层则相对稳定，因此以抽象为基础搭建起来的架构要比以细节为基础搭建起来的架构要稳定得多。

目的：
1. 降低类间的耦合性。
2. 提高系统的稳定性。
3. 减少并行开发引起的风险。
4. 提高代码的可读性和可维护性。

命名由来：

以“例子”为例说明：之前底层实现（DeviceXXX）没有别的依赖，现在会依赖接口，这就是反转。

## SOLID视角下的设计模式

设计模式是软件领域特定问题的通用解决方案，所以会遵循SOLID。

### 举例：SRP与职责链模式

说明：
1. 以提供订购服务的Web服务为例，该服务包含若干HTTP API
2. 不同类的API需要不同的前置检查，如身份验证、数据验证、缓存等

初始设计：
1. 前置检查和业务代码写在一起，且前置检查放在一个函数里边
2. 遇到的问题：业务代码迅速变得很臃肿，且修改前置检查代码会影响所有接口

![](/assets/image/20230423-solid/srp-rc-1.png)

解决方案，使用职责链模式：
1. 每项检查都独立实现为middleware，在框架层面集成，与业务代码解耦合
2. 每个middleware只负责一个职责，所以符合SRP。

![](/assets/image/20230423-solid/srp-rc-2.png)


### 举例：OCP与适配器模式

说明：
1. 以从不同来源获取骨片数据，计算分析报表，展示给用户的程序为例
2. 不同的数据来源方数据格式不尽相同，分析函数库只支持JSON特定格式的数据。
3. 修改分析函数库比较复杂，或者因为使用第三方服务根本无法修改，所以只能采用其他办法

![](/assets/image/20230423-solid/ocp-a-1.png)

解决方案，使用适配器模式：
1. 为每一种数据格式写一个适配器类，将数据转化为分析函数库可以使用的格式
2. 新增数据格式时，由于不需要修改分析函数库，所以符合开闭原则
3. 下图是更为抽象的适配器模式的描述

![](/assets/image/20230423-solid/ocp-a-2.png)
![](/assets/image/20230423-solid/ocp-a-3.png)

## 参考

[1] 《架构整洁之道》

[2] [设计模式](https://refactoringguru.cn/design-patterns/catalog)

[3] [细说 里氏替换原则](https://zhuanlan.zhihu.com/p/268574641)

[4] [单一职责原则](https://www.cnblogs.com/hunternet/p/14646443.html)
